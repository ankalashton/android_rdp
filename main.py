from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
import socket

class SocketClient(BoxLayout):
    def __init__(self, **kwargs):
        super(SocketClient, self).__init__(orientation="vertical", **kwargs)

        self.ip_input = TextInput(text="192.168.130.39", multiline=False, hint_text="IP –∞–¥—Ä–µ—Å")
        self.port_input = TextInput(text="3389", multiline=False, hint_text="–ü–æ—Ä—Ç")
        self.output_label = Label(text="–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", size_hint_y=0.3)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_btn = Button(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        connect_btn.bind(on_press=self.connect_to_server)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        check_btn = Button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
        check_btn.bind(on_press=self.check_availability)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.add_widget(Label(text="–í–≤–µ–¥–∏ IP –∏ –ø–æ—Ä—Ç"))
        self.add_widget(self.ip_input)
        self.add_widget(self.port_input)
        self.add_widget(connect_btn)
        self.add_widget(check_btn)
        self.add_widget(self.output_label)

    def connect_to_server(self, instance):
        ip = self.ip_input.text.strip()
        try:
            port = int(self.port_input.text.strip())
        except ValueError:
            self.output_label.text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç"
            return

        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(5)
            s.connect((ip, port))
            s.send("–ü—Ä–∏–≤–µ—Ç, —Å–µ—Ä–≤–µ—Ä!".encode("utf-8"))
            response = s.recv(1024).decode(errors="ignore")
            self.output_label.text = f"‚úÖ –û—Ç–≤–µ—Ç: {response}"
            s.close()
        except socket.timeout:
            self.output_label.text = "‚åõ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)"
        except ConnectionRefusedError:
            self.output_label.text = "üö´ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è RDP"
        except OSError as e:
            self.output_label.text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {e}"
        except Exception as e:
            self.output_label.text = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

    def check_availability(self, instance):
        ip = self.ip_input.text.strip()
        try:
            port = int(self.port_input.text.strip())
        except ValueError:
            self.output_label.text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç"
            return

        try:
            with socket.create_connection((ip, port), timeout=3):
                self.output_label.text = f"‚úÖ –°–µ—Ä–≤–µ—Ä {ip}:{port} –¥–æ—Å—Ç—É–ø–µ–Ω"
        except socket.timeout:
            self.output_label.text = f"‚åõ –¢–∞–π–º–∞—É—Ç: —Å–µ—Ä–≤–µ—Ä {ip}:{port} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        except Exception as e:
            self.output_label.text = f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

class SocketApp(App):
    def build(self):
        return SocketClient()

if __name__ == "__main__":
    SocketApp().run()
