from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from smb.SMBConnection import SMBConnection
import threading

USERNAME = "afirnd"
PASSWORD = "afifarm5!"
IP_ADDRESS = "192.168.130.39"
SHARE_NAME = "Afimilk"
FOLDER = "Robot"
TARGET_FILE = "RMC.exe"

class SMBChecker(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        self.result_label = Label(text="üïí –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ", font_size=20, size_hint_y=None, height=50)
        check_btn = Button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å RMC.exe", size_hint_y=None, height=50)
        check_btn.bind(on_press=self.start_check)

        self.add_widget(self.result_label)
        self.add_widget(check_btn)

    def start_check(self, *args):
        self.result_label.text = "‚è≥ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞..."
        threading.Thread(target=self.check_file).start()

    def check_file(self):
        try:
            conn = SMBConnection(USERNAME, PASSWORD, "android_kivy", "smb_host", use_ntlm_v2=True)
            connected = conn.connect(IP_ADDRESS, 445, timeout=5)

            if connected:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMB.")
                files = conn.listPath(SHARE_NAME, f"/{FOLDER}")
                print(f"üìÅ –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤:")
                for f in files:
                    print(" -", f.filename)

                found = any(f.filename.lower() == TARGET_FILE.lower() for f in files)
                if found:
                    self.update_label(f"‚úÖ –§–∞–π–ª {TARGET_FILE} –Ω–∞–π–¥–µ–Ω!")
                else:
                    self.update_label(f"‚ùå –§–∞–π–ª {TARGET_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                self.update_label("üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMB.")

            conn.close()

        except Exception as e:
            print("‚ö†Ô∏è SMB –æ—à–∏–±–∫–∞:", e)
            self.update_label(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    def update_label(self, text):
        self.result_label.text = text

class SMBCheckerApp(App):
    def build(self):
        return SMBChecker()

if __name__ == "__main__":
    SMBCheckerApp().run()
